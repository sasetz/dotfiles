#!/usr/bin/env bash

# option to disable all actions, instead they are replaced with stdout logging
# when true, nothing is actually done even if the text says otherwise
# when false, the actions are actually performed
DEBUG=false

if [[ ! -e $HOME/.local/bin/configs ]]; then
    echo "This script is running directly from the repository.
Do you want to inject it to '~/.local/bin'? If this directory is in your PATH,
this will make this script execute from anywhere else on the system"
    read -p "Do you want to create a reference script? [Y/n] " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
	mkdir -p $HOME/.local/bin
        echo "#!/bin/bash
cd $PWD; ./configs \"\$@\"" > $HOME/.local/bin/configs
        chmod u+x $HOME/.local/bin/configs
        echo "Created a script that references this directory and script. Do not delete the script inside of the repo!"
    fi
fi

execute_all() {
    RESULT=0
    for script in configurations/*.sh; do
        if [[ $DEBUG != true ]]; then
            $script "$@"
        else
            echo "[DEBUG] $script $@"
        fi
        if [[ $? -ne 0 ]]; then
            RESULT=1
            echo "Error executing script $script"
        fi
    done
    return $RESULT
}

finish_execution() {
    if [[ $1 -eq 0 ]]; then
        echo "$2"
    else
        echo "$3"
    fi
}

if [[ $DEBUG == true ]]; then
    echo "DEBUGGING IS TURNED ON."
    echo "No actions will be performed, only logged."
    echo "Change the variable DEBUG to false in the script to make it work again."
    echo
    echo '-----------------------------------------------------------------------'
    echo
fi

case "$1" in
    backup)
        echo 'Starting the backup...'
        BACKUP_NAME=$(date +%d.%m.%Y_%H:%M)
        if [[ $# -eq 1 ]]; then
            execute_all backup "$BACKUP_NAME"
            finish_execution $? "Successfully created a backup!" "Failed creating a backup."
            exit
        else
            shift
            SCRIPTS=()
            RESULT=1
            for arg in "$@"; do
                if [[ $arg == 'all' ]]; then
                    execute_all backup "$BACKUP_NAME"
                    finish_execution $? "Successfully created a backup!" "Failed creating a backup."
                    exit
                fi
                SCRIPTS+=("$arg.sh")
            done

            RESULT=0
            for script in "${SCRIPTS[@]}"; do
                if [[ $DEBUG != true ]]; then
                    configurations/$script backup "$BACKUP_NAME"
                else
                    echo "[DEBUG] configurations/$script backup $BACKUP_NAME"
                fi
                if [[ $? -ne 0 ]]; then
                    RESULT=1
                    echo "Error executing script $script"
                fi
            done
            finish_execution $RESULT "Successfully created a backup!" "Failed creating a backup."
            exit
        fi
        ;;

    deploy)
        echo 'Applying configuration(s)...'
        echo
        echo 'Warning: this action will erase your current configuration'
        echo "Following configurations will be deleted: $@"
        read -p "Are you sure you want to proceed? [y/N] " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo 'Cancelling'
            exit
        fi
        if [[ $# -eq 1 ]]; then
            execute_all deploy
            finish_execution $? "Successfully deployed!" "Failed deploying."
            exit
        else
            shift
            SCRIPTS=()
            for arg in "$@"; do
                if [[ $arg == 'all' ]]; then
                    execute_all deploy
                    exit
                fi
                SCRIPTS+=("$arg.sh")
            done

            RESULT=0
            for script in "${SCRIPTS[@]}"; do
                if [[ $DEBUG != true ]]; then
                    configurations/$script deploy
                else
                    echo "[DEBUG] configurations/$script deploy"
                fi
                if [[ $? -ne 0 ]]; then
                    RESULT=1
                    echo "Error executing script $script"
                fi
            done
            finish_execution $RESULT "Successfully deployed!" "Failed deploying."
        fi
        ;;

    commit)
        echo 'Adding applied configurations to the repository...'
        if [[ $# -eq 1 ]]; then
            execute_all commit
            finish_execution $? "Successfully added configurations to the repository!" "Failed adding configurations to the repository."
            exit
        else
            shift
            SCRIPTS=()
            for arg in "$@"; do
                if [[ $arg == 'all' ]]; then
                    execute_all commit
                    finish_execution $? "Successfully added configurations to the repository!" "Failed adding configurations to the repository."
                    exit
                fi
                SCRIPTS+=("$arg.sh")
            done

            RESULT=0
            for script in "${SCRIPTS[@]}"; do
                if [[ $DEBUG != true ]]; then
                    configurations/$script commit
                else
                    echo "[DEBUG] configurations/$script commit"
                fi
                if [[ $? -ne 0 ]]; then
                    RESULT=1
                    echo "Error executing script $script"
                fi
            done
            finish_execution $RESULT "Successfully added configurations to the repository!" "Failed adding configurations to the repository."
        fi
        ;;
    
    list)
        echo 'Available configurations:'
        echo
        for script in configurations/*.sh; do
            echo $(basename -s .sh $script)
        done
        echo
        echo "Apply any of these configurations using 'configs deploy [configurations...]'."
        ;;

    create)
        echo 'Creating default configurations with the provided names...'
        if [[ $# -eq 1 ]]; then
            echo 'ERROR: Please, provide at least one configuration name to create.'
            exit 1
        else
            shift
            SCRIPTS=()
            RESULT=1
            for arg in "$@"; do
                if [[ $arg == 'all' ]]; then
                    echo "Name 'all' is reserved for specifying every configuration available. Cannot create a configuration with that name."
                    continue
                fi
                if [[ -e "configurations/$arg.sh" ]]; then
                    echo "This configuration already exists: $arg.sh -- Skipping"
                else
                    SCRIPTS+=("$arg")
                    RESULT=0
                fi
            done

            for name in "${SCRIPTS[@]}"; do
                script="configurations/$name.sh"
                default_script="#!/usr/bin/env bash

./default_configuration.sh '$name' \"\$HOME/.config/$name\" \"./data/$name\" \"\$@\"
"
                if [[ $DEBUG != true ]]; then
                    echo "$default_script" > $script
                    chmod u+x $script
                else
                    echo "[DEBUG] $default_script"
                    echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
                    echo "[DEBUG] this script would be saved to: $script"
                    echo
                    echo "[DEBUG] chmod u+x $script"
                fi
                if [[ $? -ne 0 ]]; then
                    RESULT=1
                    echo "Error creating script $script"
                fi
            done
            finish_execution $RESULT "Successfully added new configurations!" "Failed adding new configurations."
        fi
        ;;

    *)
        echo "    Usage: configs backup [configuration to backup ...]
           configs deploy [configuration for deploying ...]
           configs commit [configuration for committing ...]
           configs create [configuration names to create ...]
           configs list

    Verbs:
    backup - save applied configurations in a backup directory
    deploy - apply configurations from repository
    commit - save applied configurations as a replacement for the old ones in 
    the repository
    list   - list all available scripts/apps
    create - add a default configuration with the provided name

    Configurations:

    Names of the configuration scripts to be executed from the repository.
    There must be no file extension (.sh or similar), just the name of the
    script (program). Examples:
    - kitty
    - alacritty
    - neovim
    - all (uses chosen verb on every script)

    If no additional parameters are provided, all scripts are run."
esac

#vim: filetype=bash

